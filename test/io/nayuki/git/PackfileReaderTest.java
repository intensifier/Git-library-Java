/* 
 * Git library
 * Copyright (c) Project Nayuki
 * 
 * https://www.nayuki.io/page/git-library-java
 */

package io.nayuki.git;

import static org.junit.Assert.assertEquals;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Test;


/**
 * Tests the functionality of class {@link PackfileReader}.
 */
public final class PackfileReaderTest {
	
	@Test public void testDecodeTypeAndSize() throws IOException {
		Object[][] cases = {
			{              0x00L, bytes(0x00)},
			{              0x28L, bytes(0x05)},
			{              0x69L, bytes(0x1D)},
			{              0x52L, bytes(0x2A)},
			{              0x0CL, bytes(0x41)},
			{              0x2CL, bytes(0x45)},
			{              0x6DL, bytes(0x5D)},
			{              0x56L, bytes(0x6A)},
			{              0x7FL, bytes(0x7F)},
			{              0xA0L, bytes(0x84, 0x01)},
			{             0x2F1L, bytes(0x9E, 0x05)},
			{           0x3C202L, bytes(0xA0, 0x84, 0x0F)},
			{           0xD96D0L, bytes(0x8A, 0xAD, 0x36)},
			{         0x28FB84CL, bytes(0xC9, 0xF0, 0xBE, 0x94, 0x00)},
			{        0x29BF83F4L, bytes(0xCE, 0x87, 0xFE, 0xCD, 0x02)},
			{      0x5989639864L, bytes(0xCC, 0xB0, 0x8E, 0xCB, 0x98, 0x0B)},
			{      0x869E4D06FFL, bytes(0xFF, 0x8D, 0xB4, 0xF2, 0xE9, 0x10)},
			{   0x1C91317544886L, bytes(0xE0, 0x91, 0xD1, 0xBA, 0xB1, 0xA2, 0xF2, 0x00)},
			{   0x30756F5ADA964L, bytes(0xCC, 0xD2, 0xB6, 0xAD, 0xEF, 0xEA, 0xC1, 0x01)},
			{ 0x678584A0F725FB0L, bytes(0x86, 0xBF, 0xC9, 0xFB, 0xA0, 0x89, 0x96, 0xBC, 0x06)},
			{ 0xD140D7D946AD589L, bytes(0x91, 0xAB, 0xAB, 0xA3, 0xD9, 0xAF, 0x83, 0x8A, 0x0D)},
			{0x7FFFFFFFFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F)},
			{0x7FFFFFFFFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00)},
			{0x8000000000000000L, bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01)},
			{0x8000000000000000L, bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x00)},
			{0xFFFFFFFFFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01)},
			{0xFFFFFFFFFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x80, 0x00)},
		};
		for (Object[] cs : cases) {
			DataInput in = new DataInputStream(new ByteArrayInputStream((byte[])cs[1]));
			assertEquals((long)cs[0], PackfileReader.decodeTypeAndSize(in));
		}
	}
	
	
	@Test public void testDecodeTypeAndSizeInvalid() throws IOException {
		byte[][] cases = {
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x02),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
		};
		for (byte[] cs : cases) {
			try {
				DataInput in = new DataInputStream(new ByteArrayInputStream(cs));
				PackfileReader.decodeTypeAndSize(in);
				Assert.fail();
			} catch (GitFormatException e) {}  // Pass
		}
	}
	
	
	
	@Test public void testDecodeOffsetDelta() throws IOException {
		Object[][] cases = {
			{              0x00L, bytes(0x00)},
			{              0x12L, bytes(0x12)},
			{              0x65L, bytes(0x65)},
			{              0x7FL, bytes(0x7F)},
			{              0x80L, bytes(0x80, 0x00)},
			{              0xFFL, bytes(0x80, 0x7F)},
			{             0x9FDL, bytes(0x92, 0x7D)},
			{            0x1CFFL, bytes(0xB8, 0x7F)},
			{            0x1FE5L, bytes(0xBE, 0x65)},
			{            0x3988L, bytes(0xF2, 0x08)},
			{            0x3FA4L, bytes(0xFE, 0x24)},
			{            0x4000L, bytes(0xFF, 0x00)},
			{            0x4038L, bytes(0xFF, 0x38)},
			{           0x4455BL, bytes(0x90, 0x89, 0x5B)},
			{          0x101BE1L, bytes(0xBF, 0xB6, 0x61)},
			{          0x170734L, bytes(0xDB, 0x8D, 0x34)},
			{         0x3E3A3FEL, bytes(0x9E, 0x8D, 0xC6, 0x7E)},
			{         0x46AA243L, bytes(0xA2, 0xA9, 0xC3, 0x43)},
			{         0x8B71920L, bytes(0xC4, 0xDB, 0xB1, 0x20)},
			{      0x2F21D3463FL, bytes(0x84, 0xF1, 0x8D, 0xCC, 0x8B, 0x3F)},
			{      0xC7F59B5EE9L, bytes(0x97, 0xFE, 0xAB, 0xEC, 0xBC, 0x69)},
			{0xAA8281B4CC95248FL, bytes(0x80, 0xA9, 0xC0, 0x9F, 0xB5, 0xCB, 0xE3, 0xD3, 0xC8, 0x0F)},
			{0xD92B42F1DFA6EBE3L, bytes(0x80, 0xD8, 0x94, 0xCF, 0xDD, 0x9C, 0xFC, 0x9A, 0xD6, 0x63)},
			{0x7FFFFFFFFFFFFFFFL, bytes(0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x7F)},
			{0x8000000000000000L, bytes(0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0x00)},
			{0xFFFFFFFFFFFFFFFFL, bytes(0x80, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x7F)},
		};
		for (Object[] cs : cases) {
			DataInput in = new DataInputStream(new ByteArrayInputStream((byte[])cs[1]));
			assertEquals((long)cs[0], PackfileReader.decodeOffsetDelta(in));
		}
	}
	
	
	@Test public void testDecodeOffsetDeltaInvalid() throws IOException {
		byte[][] cases = {
			bytes(0x80, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0x00),
			bytes(0x80, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0x01),
			bytes(0x80, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00),
			bytes(0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00),
			bytes(0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00),
		};
		for (byte[] cs : cases) {
			try {
				DataInput in = new DataInputStream(new ByteArrayInputStream(cs));
				PackfileReader.decodeOffsetDelta(in);
				Assert.fail();
			} catch (GitFormatException e) {}  // Pass
		}
	}
	
	
	
	@Test public void testDecodeDeltaHeaderInt() throws IOException {
		Object[][] cases = {
			{               0x0L, bytes(0x00)},
			{              0x7FL, bytes(0x7F)},
			{               0x0L, bytes(0x80, 0x00)},
			{            0x2000L, bytes(0x80, 0x40)},
			{           0xA3004L, bytes(0x84, 0xE0, 0x28)},
			{        0x58F3AA54L, bytes(0xD4, 0xD4, 0xCE, 0xC7, 0x05)},
			{        0xFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0x0F)},
			{        0xFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0x00)},
			{        0xFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0x80, 0x00)},
			{0x4C01E564F6725BBCL, bytes(0xBC, 0xB7, 0xC9, 0xB3, 0xCF, 0xAC, 0xF9, 0x80, 0x4C)},
			{0x7FFFFFFFFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F)},
			{0x7FFFFFFFFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00)},
			{0x8000000000000000L, bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01)},
			{0x8000000000000000L, bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x00)},
			{0x8000000000000000L, bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x00)},
			{0xFFFFFFFFFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01)},
			{0xFFFFFFFFFFFFFFFFL, bytes(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x00)},
		};
		for (Object[] cs : cases) {
			DataInput in = new DataInputStream(new ByteArrayInputStream((byte[])cs[1]));
			assertEquals((long)cs[0], PackfileReader.decodeDeltaHeaderInt(in));
		}
	}
	
	
	@Test public void testDecodeDeltaHeaderIntInvalid() throws IOException {
		byte[][] cases = {
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x02),
			bytes(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
			bytes(0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01),
		};
		for (byte[] cs : cases) {
			try {
				DataInput in = new DataInputStream(new ByteArrayInputStream(cs));
				PackfileReader.decodeDeltaHeaderInt(in);
				Assert.fail();
			} catch (GitFormatException e) {}  // Pass
		}
	}
	
	
	
	private static byte[] bytes(int... x) {
		var b = new byte[x.length];
		for (int i = 0; i < b.length; i++)
			b[i] = (byte)x[i];
		return b;
	}
	
}
